#!/usr/bin/env ruby
require 'yaml'
require 'json'

SHORTHAND_RE = /(-?\d*)([crbpwdhtx])/

INFINIY_LOWER_BOUND = {}
INFINIY_UPPER_BOUND = {}
%w[crew comm data nav power drift heat thrust radiation].each do |type|
  INFINIY_LOWER_BOUND[type] = -1 << 63
  INFINIY_UPPER_BOUND[type] = 1 << 63 - 1
end

String.class_eval do

  def to_resources(base = {})
    raise "Invalid shorthand: #{self.inspect}" unless self =~ /\A(#{SHORTHAND_RE})*\z/
    h = {}
    scan(SHORTHAND_RE).each do |quant, type|
      type = case type
             when 'c'; 'crew'
             when 'r'; 'comm'       # r = red
             when 'b'; 'data'       # b = blue
             when 'p'; 'nav'        # p = purple
             when 'w'; 'power'      # w for "watt"
             when 'd'; 'drift'
             when 'h'; 'heat'
             when 't'; 'thrust'
             when 'x'; 'radiation'  # x for "x-rays"
             else; raise "Invalid type: #{type}"; end
      h[type] ||= 0
      h[type] += quant == '' ? 1 : quant.to_i
    end
    base.merge(h)
  end

end

Hash.class_eval do

  def to_commands
    map do |name, value|
      input, output = value.split(/\s+/, 2)
      input, output = '', input if output.nil?
      {
        'name' => name,
        'input' => input.to_resources,
        'output' => output.to_resources,
      }
    end.prioritize
  end

end

Array.class_eval do

  def prioritize
    sort_by! do |cmd|
      name, input, output = cmd.values_at('name', 'input', 'output')
      if name == 'power'
        0
      elsif name == 'dt'
        -1000
      else
        keys = (input.keys + output.keys).uniq - %w[heat drift crew]
        o = output.values_at(*keys).compact.reduce(:+).to_f
        i = input.values_at(*keys).compact.reduce(:+).to_f
        i += input['power'].to_i # penalize power use
        -100 * (o / i) - o
      end
    end
  end

end

input = YAML.load_file(ARGV[0])
input.merge!(
  'start' => input.fetch('start').to_resources,
  'goal' => input.fetch('goal').to_resources,
  'commands' => input.fetch('commands').to_commands,
  'turn_cost' => input.fetch('turn_cost', '').to_resources,
  'turn_must_end_above' => input.fetch('turn_must_end_above', '').to_resources(INFINIY_LOWER_BOUND),
  'turn_must_end_below' => input.fetch('turn_must_end_below', '').to_resources(INFINIY_UPPER_BOUND),
)
puts input.to_json
